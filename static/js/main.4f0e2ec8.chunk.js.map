{"version":3,"sources":["config.js","routers/before-login.js","routers/after-login.js","serviceWorker.js","index.js"],"names":["Cookies","Cookie","siteCookie","Token","public_url","process","site_url","blank","signup","signin","success","dashboard","addMember","detail","transaction","report","mur","profile","Loading","SplashScreen","Loadable","loader","loading","SignIn","SignUp","Dashboard","AddMember","Profile","Success","Report","Detail","Transaction","RouteBeforeLogin","exact","path","component","RouteAfterLogin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","get","ReactDOM","render","RouteAfterSign","document","getElementById","RouteBeforeSign","URL","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4f0e2ec8.chunk.js","sourcesContent":["import Cookie from 'universal-cookie'\nexport const Cookies = new Cookie()\n\nexport const siteCookie = { \n  Token: 'crediBookTurToken'\n}\n\nexport const siteLocalDB = {\n  LocalDB: 'crediBookTurLocalDB'\n}\n\nconst public_url = process.env.PUBLIC_URL\n\nexport const site_url = {\n  blank:        `${public_url}/`,\n  signup:       `${public_url}/signup`,\n  signin:       `${public_url}/signin`,\n  success:      `${public_url}/success`,\n  dashboard:    `${public_url}/dashboard`,\n  addMember:    `${public_url}/add-member`,\n  detail:       `${public_url}/detail`,\n  transaction:  `${public_url}/transaction`,\n  report:       `${public_url}/report`,\n  mur:          `${public_url}/mur`,\n  profile:      `${public_url}/profile`,\n}","import React from 'react'\nimport { site_url } from '../config'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Loadable from 'react-loadable'\n\nconst Loading = () => null\n\nconst SplashScreen = Loadable({\n  loader: () => import( '../components/pages/splash-screen' ),\n  loading: Loading\n})\n\nconst SignIn = Loadable({\n  loader: () => import( '../components/pages/signin' ),\n  loading: Loading\n})\n\nconst SignUp = Loadable({\n  loader: () => import( '../components/pages/signup' ),\n  loading: Loading\n})\n\nconst Dashboard = Loadable({\n  loader: () => import( '../components/pages/dashboard' ),\n  loading: Loading\n})\n\nconst AddMember = Loadable({\n  loader: () => import( '../components/pages/dashboard/add-member' ),\n  loading: Loading\n})\n\nconst Profile = Loadable({\n  loader: () => import( '../components/pages/profile' ),\n  loading: Loading\n})\n\nconst Success = Loadable({\n  loader: () => import( '../components/pages/success' ),\n  loading: Loading\n})\n\nconst Report = Loadable({\n  loader: () => import( '../components/pages/report' ),\n  loading: Loading\n})\n\nconst Detail = Loadable({\n  loader: () => import( '../components/pages/dashboard/detail' ),\n  loading: Loading\n})\n\nconst Transaction = Loadable({\n  loader: () => import( '../components/pages/dashboard/transaction' ),\n  loading: Loading\n})\n\n\nconst RouteBeforeLogin = (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path={site_url.signin} component={SignIn} />\n      <Route exact path={site_url.signup} component={SignUp} />\n      <Route exact path={site_url.dashboard} component={Dashboard} />\n      <Route exact path={site_url.addMember} component={AddMember} />\n      <Route exact path={site_url.detail} component={Detail} />\n      <Route exact path={site_url.transaction} component={Transaction} />\n      <Route exact path={`${site_url.transaction}/:id`} component={Transaction} />\n      <Route exact path={site_url.report} component={Report} />\n      <Route exact path={site_url.profile} component={Profile} />\n      <Route exact path={site_url.success} component={Success} />\n      <Route component={SplashScreen} />\n    </Switch>\n  </BrowserRouter>\n)\n\nexport default RouteBeforeLogin\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Loadable from 'react-loadable'\n\nconst Loading = () => null\n\nconst Dashboard = Loadable({\n  loader: () => import( '../components/pages/dashboard' ),\n  loading: Loading\n})\n\nconst RouteAfterLogin = (\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n    </Switch>\n  </BrowserRouter>\n)\n\nexport default RouteAfterLogin\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ReactDOM from 'react-dom'\nimport { Cookies, siteCookie } from './config'\nimport RouteBeforeSign from './routers/before-login'\nimport RouteAfterSign from './routers/after-login'\nimport * as serviceWorker from './serviceWorker'\nimport './assets/style.css'\n\nif ( Cookies.get( siteCookie.Token ) ){\n  ReactDOM.render( RouteAfterSign, document.getElementById( 'root' ) )\n} else {\n  ReactDOM.render( RouteBeforeSign, document.getElementById( 'root' ) )\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}